import logging
import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s',
    level=logging.DEBUG
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –∏ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏
TOKEN = "7616443575:AAFladSKXxBaWHywgJqznbonuMHbnvzAFuo"
CONTACT = "angel00chka"

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
main_menu_keyboard = [['üõí –ö–∞—Ç–∞–ª–æ–≥'], ['üõçÔ∏è –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑'], ['‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –∏ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞']]
main_menu_markup = ReplyKeyboardMarkup(main_menu_keyboard, one_time_keyboard=True)

# –ü–æ–¥–º–µ–Ω—é –ö–∞—Ç–∞–ª–æ–≥ —Å –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π –∏ –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
catalog_menu_keyboard = [['üõçÔ∏è ---–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¢–æ–≤–∞—Ä–æ–≤---'], ['–Æ–±–∫–∏', '–ö–∞—Ä—Å–µ—Ç—ã'], ['–¢–æ–ø—ã', '–ê–∫—Å–µ—Å—É–∞—Ä—ã'], ['–°—É–º–∫–∏', '–®—Ç–∞–Ω—ã'],
                         ['–ü–ª–∞—Ç—å—è', '–ö–æ–º–ø–ª–µ–∫—Ç—ã'], ['üîô –ù–∞–∑–∞–¥']]
catalog_menu_markup = ReplyKeyboardMarkup(catalog_menu_keyboard, one_time_keyboard=True)

# –ú–µ–Ω—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
info_menu_keyboard = [['üîô –ù–∞–∑–∞–¥']]
info_menu_markup = ReplyKeyboardMarkup(info_menu_keyboard, one_time_keyboard=True)

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞—á–∞—Ç—å —à–æ–ø–ø–∏–Ω–≥ üéÄ"
first_time_menu_keyboard = [['–ù–∞—á–∞—Ç—å —à–æ–ø–ø–∏–Ω–≥ üéÄ']]
first_time_menu_markup = ReplyKeyboardMarkup(first_time_menu_keyboard, one_time_keyboard=True)

# –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
user_sessions = {}


# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
async def start(update: Update, context) -> None:
    user_id = update.message.from_user.id
    user_first_name = update.message.from_user.first_name

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_sessions:
        user_sessions[user_id] = True
        greeting_text = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_first_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ 4angels.store! üéÄ"
        await update.message.reply_text(greeting_text, reply_markup=first_time_menu_markup)
    else:
        greeting_text = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_first_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –≤ 4angels.store! üéÄ"
        await update.message.reply_text(greeting_text, reply_markup=main_menu_markup)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å —à–æ–ø–ø–∏–Ω–≥ üéÄ"
async def handle_first_time(update: Update, context) -> None:
    user_id = update.message.from_user.id
    if user_id in user_sessions:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é ‚ú®", reply_markup=main_menu_markup)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def handle_menu(update: Update, context) -> None:
    text = update.message.text
    logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é: {text}")

    if text == 'üõí –ö–∞—Ç–∞–ª–æ–≥':
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä ‚ú®",
            reply_markup=catalog_menu_markup
        )
    elif text == 'üõçÔ∏è –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑':
        await update.message.reply_text(
            f"–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫: @{CONTACT}",
            reply_markup=ReplyKeyboardMarkup([['üîô –ù–∞–∑–∞–¥']], one_time_keyboard=True)
        )
    elif text == '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –∏ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞':
        await update.message.reply_text(
            f"–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ—Ç–∞: @platonnagy üßë‚ÄçüíªüéÄ \n"
            f"–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –∫–∞—Å–∞—é—â–∏–º—Å—è –±–æ—Ç–∞ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç—É –≤—ã—à–µ \n"
            f"–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –∫–∞—Å–∞—é—â–∏–º—Å—è –º–∞–≥–∞–∑–∏–Ω–∞, –ø—Ä–æ–¥–∞–∂, –∫–∞—Ç–∞–ª–æ–≥–∞ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç—É @{CONTACT}\n"
            f"–ë–æ—Ç —Å–æ–∑–¥–∞–Ω —Å –ø–æ–º–æ—â—å—é PyCharm\n"
            f"–í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã ¬©Ô∏è",
            reply_markup=info_menu_markup
        )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
async def handle_catalog(update: Update, context) -> None:
    text = update.message.text
    logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞: {text}")

    # –ó–∞—Ç—ã—á–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if text == '–Æ–±–∫–∏':
        await update.message.reply_text("–¢—É—Ç —Å–ø–∏—Å–æ–∫ —é–±–æ–∫.", reply_markup=catalog_menu_markup)
    elif text == '–ö–∞—Ä—Å–µ—Ç—ã':
        await update.message.reply_text("–¢—É—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Å–µ—Ç–æ–≤.", reply_markup=catalog_menu_markup)
    elif text == '–¢–æ–ø—ã':
        await update.message.reply_text("–¢—É—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–ø–æ–≤.", reply_markup=catalog_menu_markup)
    elif text == '–ê–∫—Å–µ—Å—É–∞—Ä—ã':
        await update.message.reply_text("–¢—É—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤.", reply_markup=catalog_menu_markup)
    elif text == '–°—É–º–∫–∏':
        await update.message.reply_text("–¢—É—Ç —Å–ø–∏—Å–æ–∫ —Å—É–º–æ–∫.", reply_markup=catalog_menu_markup)
    elif text == '–®—Ç–∞–Ω—ã':
        await update.message.reply_text("–¢—É—Ç —Å–ø–∏—Å–æ–∫ —à—Ç–∞–Ω–æ–≤.", reply_markup=catalog_menu_markup)
    elif text == '–ü–ª–∞—Ç—å—è':
        await update.message.reply_text("–¢—É—Ç —Å–ø–∏—Å–æ–∫ –ø–ª–∞—Ç—å–µ–≤.", reply_markup=catalog_menu_markup)
    elif text == '–ö–æ–º–ø–ª–µ–∫—Ç—ã':
        await update.message.reply_text("–¢—É—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤.", reply_markup=catalog_menu_markup)
    elif text == 'üîô –ù–∞–∑–∞–¥':
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_markup)


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    logger.debug("–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞")

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –±–æ—Ç–∞
    application = Application.builder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.Regex('^–ù–∞—á–∞—Ç—å —à–æ–ø–ø–∏–Ω–≥ üéÄ$'), handle_first_time))
    application.add_handler(
        MessageHandler(filters.Regex('^(üõí –ö–∞—Ç–∞–ª–æ–≥|üõçÔ∏è –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑|‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –∏ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞)$'),
                       handle_menu))
    application.add_handler(
        MessageHandler(filters.Regex('^(–Æ–±–∫–∏|–ö–∞—Ä—Å–µ—Ç—ã|–¢–æ–ø—ã|–ê–∫—Å–µ—Å—É–∞—Ä—ã|–°—É–º–∫–∏|–®—Ç–∞–Ω—ã|–ü–ª–∞—Ç—å—è|–ö–æ–º–ø–ª–µ–∫—Ç—ã|üîô –ù–∞–∑–∞–¥)$'),
                       handle_catalog))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()


if __name__ == '__main__':
    main()





